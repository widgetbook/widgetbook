import 'dart:convert';

import 'package:collection/collection.dart';
import 'package:file/file.dart';
import 'package:file/local.dart';
import 'package:path/path.dart';

import 'addons_configs.dart';
import 'cache_store.dart';
import 'use_case_metadata.dart';

/// Reads the files that are generated by `widgetbook_generator` package
/// in the `.dart_tool/build/generated` directory.
class CacheReader {
  const CacheReader({
    this.fileSystem = const LocalFileSystem(),
  });

  static const baseExtension = '.widgetbook.json';
  static const useCaseExtension = '.usecase$baseExtension';
  static const configExtension = '.config$baseExtension';

  final FileSystem fileSystem;

  Future<CacheStore> read(String path) async {
    final generatedDir = join(path, '.dart_tool', 'build', 'generated');
    final generatedDirExist = await fileSystem.isDirectory(generatedDir);

    if (!generatedDirExist) {
      return const CacheStore.empty();
    }

    final cacheFiles =
        await fileSystem
            .directory(generatedDir)
            .list(recursive: true)
            .where((entity) => entity.path.endsWith(baseExtension))
            .cast<File>()
            .toList();

    final useCases =
        cacheFiles
            .where((file) => file.path.endsWith(useCaseExtension))
            .map((file) => file.readAsStringSync())
            .map((json) => jsonDecode(json) as List)
            .map((list) => list.cast<Map<String, dynamic>>())
            .expand((list) => list) // Flatten JSON List
            .map((item) => UseCaseMetadata.fromJson(item))
            .whereNot((useCase) => useCase.cloudExclude) // Remove excluded
            .toList();

    final addonsConfigs = await cacheFiles
        .firstWhereOrNull((file) => file.path.endsWith(configExtension))
        ?.readAsString()
        .then((jsonStr) => jsonDecode(jsonStr) as Map<String, dynamic>)
        .then((json) => parseAddonsConfigsJson(json));

    return CacheStore(
      useCases: useCases,
      addonsConfigs: addonsConfigs,
    );
  }
}
